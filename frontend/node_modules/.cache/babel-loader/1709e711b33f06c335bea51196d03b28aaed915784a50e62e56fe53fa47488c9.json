{"ast":null,"code":"import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\nexport class Socket extends Emitter {\n  /**\n   * `Socket` constructor.\n   *\n   * @public\n   */\n  constructor(io, nsp, opts) {\n    super();\n    this.connected = false;\n    this.disconnected = true;\n    this.receiveBuffer = [];\n    this.sendBuffer = [];\n    this.ids = 0;\n    this.acks = {};\n    this.flags = {};\n    this.io = io;\n    this.nsp = nsp;\n    if (opts && opts.auth) {\n      this.auth = opts.auth;\n    }\n    if (this.io._autoConnect) this.open();\n  }\n  /**\n   * Subscribe to open, close and packet events\n   *\n   * @private\n   */\n  subEvents() {\n    if (this.subs) return;\n    const io = this.io;\n    this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n  }\n  /**\n   * Whether the Socket will try to reconnect when its Manager connects or reconnects\n   */\n  get active() {\n    return !!this.subs;\n  }\n  /**\n   * \"Opens\" the socket.\n   *\n   * @public\n   */\n  connect() {\n    if (this.connected) return this;\n    this.subEvents();\n    if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n    if (\"open\" === this.io._readyState) this.onopen();\n    return this;\n  }\n  /**\n   * Alias for connect()\n   */\n  open() {\n    return this.connect();\n  }\n  /**\n   * Sends a `message` event.\n   *\n   * @return self\n   * @public\n   */\n  send() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    args.unshift(\"message\");\n    this.emit.apply(this, args);\n    return this;\n  }\n  /**\n   * Override `emit`.\n   * If the event is in `events`, it's emitted normally.\n   *\n   * @return self\n   * @public\n   */\n  emit(ev) {\n    if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n      throw new Error('\"' + ev + '\" is a reserved event name');\n    }\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    args.unshift(ev);\n    const packet = {\n      type: PacketType.EVENT,\n      data: args\n    };\n    packet.options = {};\n    packet.options.compress = this.flags.compress !== false;\n    // event ack callback\n    if (\"function\" === typeof args[args.length - 1]) {\n      const id = this.ids++;\n      const ack = args.pop();\n      this._registerAckCallback(id, ack);\n      packet.id = id;\n    }\n    const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n    const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n    if (discardPacket) {} else if (this.connected) {\n      this.packet(packet);\n    } else {\n      this.sendBuffer.push(packet);\n    }\n    this.flags = {};\n    return this;\n  }\n  /**\n   * @private\n   */\n  _registerAckCallback(id, ack) {\n    var _this = this;\n    const timeout = this.flags.timeout;\n    if (timeout === undefined) {\n      this.acks[id] = ack;\n      return;\n    }\n    // @ts-ignore\n    const timer = this.io.setTimeoutFn(() => {\n      delete this.acks[id];\n      for (let i = 0; i < this.sendBuffer.length; i++) {\n        if (this.sendBuffer[i].id === id) {\n          this.sendBuffer.splice(i, 1);\n        }\n      }\n      ack.call(this, new Error(\"operation has timed out\"));\n    }, timeout);\n    this.acks[id] = function () {\n      // @ts-ignore\n      _this.io.clearTimeoutFn(timer);\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      ack.apply(_this, [null, ...args]);\n    };\n  }\n  /**\n   * Sends a packet.\n   *\n   * @param packet\n   * @private\n   */\n  packet(packet) {\n    packet.nsp = this.nsp;\n    this.io._packet(packet);\n  }\n  /**\n   * Called upon engine `open`.\n   *\n   * @private\n   */\n  onopen() {\n    if (typeof this.auth == \"function\") {\n      this.auth(data => {\n        this.packet({\n          type: PacketType.CONNECT,\n          data\n        });\n      });\n    } else {\n      this.packet({\n        type: PacketType.CONNECT,\n        data: this.auth\n      });\n    }\n  }\n  /**\n   * Called upon engine or manager `error`.\n   *\n   * @param err\n   * @private\n   */\n  onerror(err) {\n    if (!this.connected) {\n      this.emitReserved(\"connect_error\", err);\n    }\n  }\n  /**\n   * Called upon engine `close`.\n   *\n   * @param reason\n   * @private\n   */\n  onclose(reason) {\n    this.connected = false;\n    this.disconnected = true;\n    delete this.id;\n    this.emitReserved(\"disconnect\", reason);\n  }\n  /**\n   * Called with socket packet.\n   *\n   * @param packet\n   * @private\n   */\n  onpacket(packet) {\n    const sameNamespace = packet.nsp === this.nsp;\n    if (!sameNamespace) return;\n    switch (packet.type) {\n      case PacketType.CONNECT:\n        if (packet.data && packet.data.sid) {\n          const id = packet.data.sid;\n          this.onconnect(id);\n        } else {\n          this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n        }\n        break;\n      case PacketType.EVENT:\n        this.onevent(packet);\n        break;\n      case PacketType.BINARY_EVENT:\n        this.onevent(packet);\n        break;\n      case PacketType.ACK:\n        this.onack(packet);\n        break;\n      case PacketType.BINARY_ACK:\n        this.onack(packet);\n        break;\n      case PacketType.DISCONNECT:\n        this.ondisconnect();\n        break;\n      case PacketType.CONNECT_ERROR:\n        this.destroy();\n        const err = new Error(packet.data.message);\n        // @ts-ignore\n        err.data = packet.data.data;\n        this.emitReserved(\"connect_error\", err);\n        break;\n    }\n  }\n  /**\n   * Called upon a server event.\n   *\n   * @param packet\n   * @private\n   */\n  onevent(packet) {\n    const args = packet.data || [];\n    if (null != packet.id) {\n      args.push(this.ack(packet.id));\n    }\n    if (this.connected) {\n      this.emitEvent(args);\n    } else {\n      this.receiveBuffer.push(Object.freeze(args));\n    }\n  }\n  emitEvent(args) {\n    if (this._anyListeners && this._anyListeners.length) {\n      const listeners = this._anyListeners.slice();\n      for (const listener of listeners) {\n        listener.apply(this, args);\n      }\n    }\n    super.emit.apply(this, args);\n  }\n  /**\n   * Produces an ack callback to emit with an event.\n   *\n   * @private\n   */\n  ack(id) {\n    const self = this;\n    let sent = false;\n    return function () {\n      // prevent double callbacks\n      if (sent) return;\n      sent = true;\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      self.packet({\n        type: PacketType.ACK,\n        id: id,\n        data: args\n      });\n    };\n  }\n  /**\n   * Called upon a server acknowlegement.\n   *\n   * @param packet\n   * @private\n   */\n  onack(packet) {\n    const ack = this.acks[packet.id];\n    if (\"function\" === typeof ack) {\n      ack.apply(this, packet.data);\n      delete this.acks[packet.id];\n    } else {}\n  }\n  /**\n   * Called upon server connect.\n   *\n   * @private\n   */\n  onconnect(id) {\n    this.id = id;\n    this.connected = true;\n    this.disconnected = false;\n    this.emitBuffered();\n    this.emitReserved(\"connect\");\n  }\n  /**\n   * Emit buffered events (received and emitted).\n   *\n   * @private\n   */\n  emitBuffered() {\n    this.receiveBuffer.forEach(args => this.emitEvent(args));\n    this.receiveBuffer = [];\n    this.sendBuffer.forEach(packet => this.packet(packet));\n    this.sendBuffer = [];\n  }\n  /**\n   * Called upon server disconnect.\n   *\n   * @private\n   */\n  ondisconnect() {\n    this.destroy();\n    this.onclose(\"io server disconnect\");\n  }\n  /**\n   * Called upon forced client/server side disconnections,\n   * this method ensures the manager stops tracking us and\n   * that reconnections don't get triggered for this.\n   *\n   * @private\n   */\n  destroy() {\n    if (this.subs) {\n      // clean subscriptions to avoid reconnections\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs = undefined;\n    }\n    this.io[\"_destroy\"](this);\n  }\n  /**\n   * Disconnects the socket manually.\n   *\n   * @return self\n   * @public\n   */\n  disconnect() {\n    if (this.connected) {\n      this.packet({\n        type: PacketType.DISCONNECT\n      });\n    }\n    // remove socket from pool\n    this.destroy();\n    if (this.connected) {\n      // fire events\n      this.onclose(\"io client disconnect\");\n    }\n    return this;\n  }\n  /**\n   * Alias for disconnect()\n   *\n   * @return self\n   * @public\n   */\n  close() {\n    return this.disconnect();\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @param compress - if `true`, compresses the sending data\n   * @return self\n   * @public\n   */\n  compress(compress) {\n    this.flags.compress = compress;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n   * ready to send messages.\n   *\n   * @returns self\n   * @public\n   */\n  get volatile() {\n    this.flags.volatile = true;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n   * given number of milliseconds have elapsed without an acknowledgement from the server:\n   *\n   * ```\n   * socket.timeout(5000).emit(\"my-event\", (err) => {\n   *   if (err) {\n   *     // the server did not acknowledge the event in the given delay\n   *   }\n   * });\n   * ```\n   *\n   * @returns self\n   * @public\n   */\n  timeout(timeout) {\n    this.flags.timeout = timeout;\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback.\n   *\n   * @param listener\n   * @public\n   */\n  onAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.push(listener);\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback. The listener is added to the beginning of the listeners array.\n   *\n   * @param listener\n   * @public\n   */\n  prependAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.unshift(listener);\n    return this;\n  }\n  /**\n   * Removes the listener that will be fired when any event is emitted.\n   *\n   * @param listener\n   * @public\n   */\n  offAny(listener) {\n    if (!this._anyListeners) {\n      return this;\n    }\n    if (listener) {\n      const listeners = this._anyListeners;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyListeners = [];\n    }\n    return this;\n  }\n  /**\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n   * e.g. to remove listeners.\n   *\n   * @public\n   */\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n}","map":{"version":3,"names":["PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","constructor","io","nsp","opts","connected","disconnected","receiveBuffer","sendBuffer","ids","acks","flags","auth","_autoConnect","open","subEvents","subs","onopen","bind","onpacket","onerror","onclose","active","_readyState","send","args","unshift","emit","apply","ev","hasOwnProperty","Error","packet","type","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","volatile","push","timeout","undefined","timer","setTimeoutFn","i","splice","call","clearTimeoutFn","_packet","CONNECT","err","emitReserved","reason","sameNamespace","sid","onconnect","onevent","BINARY_EVENT","ACK","onack","BINARY_ACK","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","subDestroy","close","onAny","prependAny","offAny","listenersAny"],"sources":["/home/user/app/e11/Chat-App/frontend/node_modules/socket.io-client/build/esm/socket.js"],"sourcesContent":["import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io, nsp, opts) {\n        super();\n        this.connected = false;\n        this.disconnected = true;\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for connect()\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        const timeout = this.flags.timeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n    onclose(reason) {\n        this.connected = false;\n        this.disconnected = true;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n                this.onack(packet);\n                break;\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        this.id = id;\n        this.connected = true;\n        this.disconnected = false;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => this.packet(packet));\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * ```\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     * ```\n     *\n     * @returns self\n     * @public\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}