[{"/home/user/app/e11/Chat-App/frontend/src/index.js":"1","/home/user/app/e11/Chat-App/frontend/src/App.js":"2","/home/user/app/e11/Chat-App/frontend/src/components/Navigation.js":"3","/home/user/app/e11/Chat-App/frontend/src/pages/Chat.js":"4","/home/user/app/e11/Chat-App/frontend/src/pages/Home.js":"5","/home/user/app/e11/Chat-App/frontend/src/pages/Login.js":"6","/home/user/app/e11/Chat-App/frontend/src/pages/Signup.js":"7","/home/user/app/e11/Chat-App/frontend/src/components/Sidebar.js":"8","/home/user/app/e11/Chat-App/frontend/src/components/MessageForm.js":"9","/home/user/app/e11/Chat-App/frontend/src/services/appApi.js":"10","/home/user/app/e11/Chat-App/frontend/src/store.js":"11","/home/user/app/e11/Chat-App/frontend/src/features/userSlice.js":"12","/home/user/app/e11/Chat-App/frontend/src/context/appContext.js":"13"},{"size":693,"mtime":1671634681871,"results":"14","hashOfConfig":"15"},{"size":1516,"mtime":1671634681851,"results":"16","hashOfConfig":"15"},{"size":2557,"mtime":1671634681871,"results":"17","hashOfConfig":"15"},{"size":417,"mtime":1671634681871,"results":"18","hashOfConfig":"15"},{"size":764,"mtime":1671634681871,"results":"19","hashOfConfig":"15"},{"size":2400,"mtime":1671634681871,"results":"20","hashOfConfig":"15"},{"size":4361,"mtime":1671634993973,"results":"21","hashOfConfig":"15"},{"size":3318,"mtime":1671634681871,"results":"22","hashOfConfig":"15"},{"size":4780,"mtime":1671634681871,"results":"23","hashOfConfig":"15"},{"size":1061,"mtime":1671634681871,"results":"24","hashOfConfig":"15"},{"size":782,"mtime":1671634681875,"results":"25","hashOfConfig":"15"},{"size":1131,"mtime":1671634681871,"results":"26","hashOfConfig":"15"},{"size":212,"mtime":1671634681871,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1llb09g",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/user/app/e11/Chat-App/frontend/src/index.js",[],[],"/home/user/app/e11/Chat-App/frontend/src/App.js",["69","70"],[],"import \"./App.css\";\nimport Navigation from \"./components/Navigation\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Chat from \"./pages/Chat\";\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport { useSelector } from \"react-redux\";\nimport { AppContext, socket } from \"./context/appContext\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const user = useSelector((state) => state.user);\n  const [rooms, setRooms] = useState([]);\n  const [currentRoom, setCurrentRoom] = useState([]);\n  const [members, setMembers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [privateMemberMsg, setPrivateMemberMsg] = useState({});\n  const [newMessages, setNewMessages] = useState({});\n  return (\n    <AppContext.Provider\n      value={\n        {socket,\n        currentRoom,\n        setCurrentRoom,\n        members,\n        setMembers,\n        messages,\n        setNewMessages,\n        setMessages,\n        setPrivateMemberMsg,\n        rooms,\n        setRooms}\n      }\n    >\n      <BrowserRouter>\n        <Navigation />\n        <Routes>\n          <Route path='/' element={<Home />} />\n          {!user && (\n            <>\n              <Route path='/login' element={<Login />} />\n              <Route path='/signup' element={<Signup />} />\n            </>\n          )}\n          <Route path='/chat' element={<Chat />} />\n        </Routes>\n      </BrowserRouter>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","/home/user/app/e11/Chat-App/frontend/src/components/Navigation.js",[],[],"/home/user/app/e11/Chat-App/frontend/src/pages/Chat.js",[],[],"/home/user/app/e11/Chat-App/frontend/src/pages/Home.js",[],[],"/home/user/app/e11/Chat-App/frontend/src/pages/Login.js",[],[],"/home/user/app/e11/Chat-App/frontend/src/pages/Signup.js",[],[],"/home/user/app/e11/Chat-App/frontend/src/components/Sidebar.js",["71","72","73","74","75"],[],"import React, { useContext } from \"react\";\nimport { Col, ListGroup, Row } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppContext } from \"../context/appContext\";\nimport \"./Sidebar.css\";\nimport { addNotifications, resetNotifications } from \"../features/userSlice\";\n\nfunction Sidebar() {\n  const user = useSelector((state) => state.user);\n  const dispatch = useDispatch();\n  const {\n    socket,\n    setMembers,\n    members,\n    setCurrentRoom,\n    // setRooms,\n    privateMemberMsg,\n    rooms,\n    setPrivateMemberMsg,\n    currentRoom,\n  } = useContext(AppContext);\n\n\n  function joinRoom(room, isPublic = true) {\n    if (!user) {\n      return alert(\"Please login\");\n    }\n    socket.emit(\"join-room\", room, currentRoom);\n    setCurrentRoom(room);\n\n    if (isPublic) {\n      setPrivateMemberMsg(null);\n    }\n    //dispatch for notifications\n    dispatch(resetNotifications(room));\n  }\n  socket.off(\"notifications\").on(\"notifications\", (room) => {\n    if (currentRoom != room) dispatch(addNotifications(room));\n  });\n  \n\n  \n  socket.off(\"new-user\").on(\"new-user\", (payload) => {\n    setMembers(payload);\n  });\n\n  function orderIds(id1, id2) {\n    if (id1 > id2) {\n      return id1 + \"-\" + id2;\n    } else {\n      return id2 + \"-\" + id1;\n    }\n  }\n\n  function handlePrivateMemberMsg(member) {\n    setPrivateMemberMsg(member);\n    const roomId = orderIds(user._id, member._id);\n    joinRoom(roomId, false);\n  }\n\n  if (!user) {\n    return <></>;\n  }\n  return (\n    <>\n      <h2>Available rooms</h2>\n      <ListGroup>\n        {rooms.map((room, idx) => (\n          <ListGroup.Item\n            key={idx}\n            onClick={() => joinRoom(room)}\n            active={room === currentRoom}\n            style={{\n              cursor: \"pointer\",\n              display: \"flex\",\n              justifyContent: \"space-between\",\n            }}\n          >\n            {room}\n            {currentRoom !== room && <span className=\"badge rounded-pill bg-primary\">{user.newMessages[room]}</span>}\n          </ListGroup.Item>\n        ))}\n      </ListGroup>\n      <h2>Members</h2>\n      {members.map((member) => (\n        <ListGroup.Item\n          key={member.id}\n          style={{ cursor: \"pointer\" }}\n          active={privateMemberMsg?._id == member?._id}\n          onClick={() => handlePrivateMemberMsg(member)}\n          disabled={member._id === user._id}\n        >\n           <Row>\n                        <Col xs={2} className=\"member-status\">\n                            <img src={member.picture} className=\"member-status-img\" />\n                            {member.status == \"online\" ? <i className=\"fas fa-circle sidebar-online-status\"></i> : <i className=\"fas fa-circle sidebar-offline-status\"></i>}\n                        </Col>\n                        <Col xs={9}>\n                            {member.name}\n                            {member._id === user?._id && \" (You)\"}\n                            {member.status == \"offline\" && \" (Offline)\"}\n                        </Col>\n                        <Col xs={1}>\n                            <span className=\"badge rounded-pill bg-primary\">{user.newMessages[orderIds(member._id, user._id)]}</span>\n                        </Col>\n                    </Row>\n        </ListGroup.Item>\n      ))}\n    </>\n  );\n}\n\nexport default Sidebar;\n","/home/user/app/e11/Chat-App/frontend/src/components/MessageForm.js",[],[],"/home/user/app/e11/Chat-App/frontend/src/services/appApi.js",[],[],"/home/user/app/e11/Chat-App/frontend/src/store.js",[],[],"/home/user/app/e11/Chat-App/frontend/src/features/userSlice.js",[],[],"/home/user/app/e11/Chat-App/frontend/src/context/appContext.js",[],[],{"ruleId":"76","severity":1,"message":"77","line":18,"column":10,"nodeType":"78","messageId":"79","endLine":18,"endColumn":26},{"ruleId":"76","severity":1,"message":"80","line":19,"column":10,"nodeType":"78","messageId":"79","endLine":19,"endColumn":21},{"ruleId":"81","severity":1,"message":"82","line":38,"column":21,"nodeType":"83","messageId":"84","endLine":38,"endColumn":23},{"ruleId":"81","severity":1,"message":"85","line":89,"column":41,"nodeType":"83","messageId":"84","endLine":89,"endColumn":43},{"ruleId":"86","severity":1,"message":"87","line":95,"column":29,"nodeType":"88","endLine":95,"endColumn":87},{"ruleId":"81","severity":1,"message":"85","line":96,"column":44,"nodeType":"83","messageId":"84","endLine":96,"endColumn":46},{"ruleId":"81","severity":1,"message":"85","line":101,"column":44,"nodeType":"83","messageId":"84","endLine":101,"endColumn":46},"no-unused-vars","'privateMemberMsg' is assigned a value but never used.","Identifier","unusedVar","'newMessages' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]